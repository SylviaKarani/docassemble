name: Deploy Docassemble to AWS Lightsail

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.0

    - name: Set up SSH public key
      run: echo "${{ secrets.LIGHTSAIL_PUBLIC_KEY }}" | base64 --decode > lightsail_key.pub

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: 'eu-central-1'

    - name: Initialize Terraform
      run: terraform init

    - name: Apply Terraform Configuration
      run: terraform apply -auto-approve

    - name: Setup SSH for Lightsail
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.LIGHTSAIL_SSH_PRIVATE_KEY }}" > ~/.ssh/lightsail.pem
        chmod 600 ~/.ssh/lightsail.pem

    - name: Get Lightsail Instance Details
      id: instance-details
      run: |
        # Capture terraform output and ensure it's clean of any debug information
        INSTANCE_IP=$(terraform output -raw instance_ip | sed 's/::debug::.*//')
        echo "DEBUG: Retrieved instance IP: $INSTANCE_IP"
        echo "INSTANCE_IP=$INSTANCE_IP" >> $GITHUB_ENV

        INSTANCE_NAME=$(terraform output -raw instance_name | sed 's/::debug::.*//')
        echo "DEBUG: Retrieved instance name: $INSTANCE_NAME"
        echo "instance_name=$INSTANCE_NAME" >> $GITHUB_ENV

        KEY_PAIR_NAME=$(terraform output -raw key_pair_name | sed 's/::debug::.*//')
        echo "DEBUG: Retrieved key pair name: $KEY_PAIR_NAME"
        echo "key_pair_name=$KEY_PAIR_NAME" >> $GITHUB_ENV

        # Add debug output
        echo "----------------------------------------"
        echo "Debug Information:"
        echo "Instance IP: $INSTANCE_IP"
        echo "Instance Name: $INSTANCE_NAME"
        echo "Key Pair Name: $KEY_PAIR_NAME"
        echo "----------------------------------------"

    - name: Validate Instance Details
      run: |
        echo "Validating instance details..."
        if [ -z "${{ env.INSTANCE_IP }}" ] || [ -z "${{ env.instance_name }}" ] || [ -z "${{ env.key_pair_name }}" ]; then
          echo "Error: Missing Terraform output values!"
          exit 1
        else
          echo "Instance details validated successfully!"
        fi

    - name: Wait for Instance Boot
      run: |
        echo "Waiting for instance to complete boot process..."
        echo "Target IP: ${{ env.INSTANCE_IP }}"
        # Adding retries for SSH connection
        RETRIES=5
        for i in $(seq 1 $RETRIES); do
          echo "Attempt $i of $RETRIES to connect..."
          if ssh -o StrictHostKeyChecking=no -i ~/.ssh/lightsail.pem ubuntu@${{ env.INSTANCE_IP }} "echo Connected!"; then
            echo "SSH connection successful!"
            break
          else
            echo "SSH connection failed. Retrying..."
            sleep 30  # Wait for 30 seconds before retrying
          fi
        done

    - name: Install Docker and Deploy Docassemble
      if: success()  # Only run if previous steps succeeded
      run: |
        echo "Deploying to instance ${{ env.INSTANCE_IP }}"
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/lightsail.pem ubuntu@${{ env.INSTANCE_IP }} '
          # Update system packages
          sudo apt update -y
          sudo apt upgrade -y

          # Install Docker dependencies
          sudo apt install -y apt-transport-https ca-certificates curl software-properties-common

          # Add Docker GPG key and repository
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

          # Install Docker
          sudo apt update -y
          sudo apt install -y docker-ce docker-ce-cli containerd.io

          # Pull Docassemble image
          sudo docker pull sylvia98/docassemble:latest

          # Stop and remove existing container if it exists
          sudo docker stop docassemble 2>/dev/null || true
          sudo docker rm docassemble 2>/dev/null || true

          # Run new container
          sudo docker run -d -p 80:80 --name docassemble sylvia98/docassemble:latest
        '

    - name: Verify Deployment
      if: success()
      run: |
        echo "Deployment completed successfully"
        echo "Instance IP: ${{ env.INSTANCE_IP }}"
        echo "Instance Name: ${{ env.instance_name }}"
        echo "Key Pair Name: ${{ env.key_pair_name }}"
