name: Deploy Docassemble to AWS Lightsail

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.0

    - name: Set up SSH public key
      run: echo "${{ secrets.LIGHTSAIL_PUBLIC_KEY }}" | base64 --decode > lightsail_key.pub

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: 'eu-central-1'

    - name: Initialize Terraform
      run: terraform init

    - name: Apply Terraform Configuration
      run: terraform apply -auto-approve

    - name: Setup SSH for Lightsail
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.LIGHTSAIL_SSH_PRIVATE_KEY }}" > ~/.ssh/lightsail.pem
        chmod 600 ~/.ssh/lightsail.pem

    - name: Get Lightsail Instance Details
      id: instance-details
      run: |
        # Function to clean terraform output
        clean_terraform_output() {
          local raw_output="$1"
          echo "$raw_output" | grep -oE '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+|^docassemble[^:]*' || echo "$raw_output"
        }

        # Get and clean terraform outputs
        raw_ip=$(terraform output -raw instance_ip)
        raw_name=$(terraform output -raw instance_name)
        raw_key=$(terraform output -raw key_pair_name)

        # Clean the outputs
        INSTANCE_IP=$(clean_terraform_output "$raw_ip")
        INSTANCE_NAME=$(clean_terraform_output "$raw_name")
        KEY_PAIR_NAME=$(clean_terraform_output "$raw_key")

        # Validate IP format
        if [[ ! "$INSTANCE_IP" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Error: Invalid IP format: $INSTANCE_IP"
          exit 1
        fi

        # Set environment variables
        {
          echo "INSTANCE_IP=$INSTANCE_IP"
          echo "INSTANCE_NAME=$INSTANCE_NAME"
          echo "KEY_PAIR_NAME=$KEY_PAIR_NAME"
        } >> "$GITHUB_ENV"

        # Debug output
        echo "----------------------------------------"
        echo "Debug Information:"
        echo "Instance IP: $INSTANCE_IP"
        echo "Instance Name: $INSTANCE_NAME"
        echo "Key Pair Name: $KEY_PAIR_NAME"
        echo "----------------------------------------"

    - name: Validate Instance Details
      run: |
        echo "Validating instance details..."
        if [[ -z "${{ env.INSTANCE_IP }}" || ! "${{ env.INSTANCE_IP }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Error: Invalid or missing INSTANCE_IP!"
          exit 1
        fi

        if [[ -z "${{ env.INSTANCE_NAME }}" ]]; then
          echo "Error: Missing INSTANCE_NAME!"
          exit 1
        fi

        if [[ -z "${{ env.KEY_PAIR_NAME }}" ]]; then
          echo "Error: Missing KEY_PAIR_NAME!"
          exit 1
        fi

        echo "Instance details validated successfully!"

    - name: Wait for Instance Boot
      run: |
        echo "Waiting for instance to complete boot process..."
        echo "Target IP: ${{ env.INSTANCE_IP }}"
        sleep 90

    - name: Test SSH Connection
      run: |
        echo "Testing SSH connection to ${{ env.INSTANCE_IP }}"
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/lightsail.pem ubuntu@${{ env.INSTANCE_IP }} "echo Connected!"

    - name: Install Docker and Deploy Docassemble
      if: success()
      run: |
        echo "Deploying to instance ${{ env.INSTANCE_IP }}"
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/lightsail.pem ubuntu@${{ env.INSTANCE_IP }} '
          # Update system packages
          sudo apt update -y
          sudo apt upgrade -y

          # Install Docker dependencies
          sudo apt install -y apt-transport-https ca-certificates curl software-properties-common

          # Add Docker GPG key and repository
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

          # Install Docker
          sudo apt update -y
          sudo apt install -y docker-ce docker-ce-cli containerd.io

          # Pull Docassemble image
          sudo docker pull sylvia98/docassemble:latest

          # Stop and remove existing container if it exists
          sudo docker stop docassemble 2>/dev/null || true
          sudo docker rm docassemble 2>/dev/null || true

          # Run new container
          sudo docker run -d -p 80:80 --name docassemble sylvia98/docassemble:latest
        '

    - name: Verify Deployment
      if: success()
      run: |
        echo "Deployment completed successfully"
        echo "Instance IP: ${{ env.INSTANCE_IP }}"
        echo "Instance Name: ${{ env.INSTANCE_NAME }}"
        echo "Key Pair Name: ${{ env.KEY_PAIR_NAME }}"
